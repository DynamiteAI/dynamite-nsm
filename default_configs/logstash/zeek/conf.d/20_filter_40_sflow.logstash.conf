#------------------------------------------------------------------------------
# Copyright (C)2019 Robert Cowart
# 
# The contents of this file and/or repository are subject to the Robert Cowart
# Public License (the "License") and may not be used or distributed except in
# compliance with the License. You may obtain a copy of the License at:
# 
# http://www.koiossian.com/public/robert_cowart_public_license.txt
# 
# Software distributed under the License is distributed on an "AS IS" basis,
# WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License for
# the specific language governing rights and limitations under the License.
# 
# The Original Source Code was developed by Robert Cowart. Portions created by
# Robert Cowart are Copyright (C)2019 Robert Cowart. All Rights Reserved.
#------------------------------------------------------------------------------

filter {
  if [event][type] == "sflow" {
    if [agent_ip] {
      if [agent_ip] != [node][ipaddr] {
        mutate {
          id => "sflow_set_node_agent_ip"
          replace => {
            "[node][ipaddr]" => "%{[agent_ip]}"
            "[node][hostname]" => "%{[agent_ip]}"
          }
        }
        if [@metadata][resolve_ip2host] == "true" or [@metadata][resolve_ip2host] == "exporters" {
          dns {
            id => "sflow_dns_node_name"
            reverse => [ "[node][hostname]" ]
            action => "replace"
            nameserver => "${ELASTIFLOW_NAMESERVER:127.0.0.1}"
            hit_cache_size => "${ELASTIFLOW_DNS_HIT_CACHE_SIZE:25000}"
            hit_cache_ttl => "${ELASTIFLOW_DNS_HIT_CACHE_TTL:900}"
            failed_cache_size => "${ELASTIFLOW_DNS_FAILED_CACHE_SIZE:75000}"
            failed_cache_ttl => "${ELASTIFLOW_DNS_FAILED_CACHE_TTL:3600}"
          }
        }
      }
      mutate {
        id => "sflow_remove_agent_ip"
        remove_field => [ "[agent_ip]" ]
      }
    }

    # Process sFlow flow sample events.
    if [sflow_type] == "flow_sample" or [sflow_type] == "expanded_flow_sample" {
      # Restructure common sFlow data into an object.
      mutate {
        id => "sflow_rename_sflow_fields"
        rename => {
          #"agent_ip" => "[sflow][agent_ip]"
          #"flow_sequence_number" => "[sflow][flow_sequence_number]"
          #"header_size" => "[sflow][header_size]"
          #"ip_checksum" => "[sflow][ip_checksum]"
          #"ip_fragment_offset" => "[sflow][ip_fragment_offset]"
          #"ip_header_length" => "[sflow][ip_header_length]"
          #"ip_identification" => "[sflow][ip_identification]"
          #"ip_total_length" => "[sflow][ip_total_length]"
          #"padded" => "[sflow][padded]"
          #"sample_pool" => "[sflow][sample_pool]"
          #"sample_seq_number" => "[sflow][sample_seq_number]"
          #"sequence_number" => "[sflow][sequence_number]"
          #"sflow_version" => "[sflow][sflow_version]"
          #"size_header" => "[sflow][size_header]"
          #"stripped" => "[sflow][stripped]"
          #"tcp_ack_number" => "[sflow][tcp_ack_number]"
          #"tcp_checksum" => "[sflow][tcp_checksum]"
          #"tcp_header_length" => "[sflow][tcp_header_length]"
          #"tcp_is_ack" => "[sflow][tcp_is_ack]"
          #"tcp_is_cwr" => "[sflow][tcp_is_cwr]"
          #"tcp_is_ecn_echo" => "[sflow][tcp_is_ecn_echo]"
          #"tcp_is_fin" => "[sflow][tcp_is_fin]"
          #"tcp_is_nonce" => "[sflow][tcp_is_nonce]"
          #"tcp_is_push" => "[sflow][tcp_is_push]"
          #"tcp_is_reset" => "[sflow][tcp_is_reset]"
          #"tcp_is_syn" => "[sflow][tcp_is_syn]"
          #"tcp_is_urgent" => "[sflow][tcp_is_urgent]"
          #"tcp_reserved" => "[sflow][tcp_reserved]"
          #"tcp_seq_number" => "[sflow][tcp_seq_number]"
          #"udp_checksum" => "[sflow][udp_checksum]"
          #"udp_length" => "[sflow][udp_length]"
          #"uptime_in_ms" => "[sflow][uptime_in_ms]"
          "drops" => "[sflow][drops]"
          "dst_ip" => "[flow][dst_addr]"
          "dst_mac" => "[sflow][dst_mac]"
          "dst_mask_len" => "[flow][dst_mask_len]"
          "dst_port" => "[flow][dst_port]"
          "dst_priority" => "[sflow][dst_priority]"
          "dst_vlan" => "[sflow][dst_vlan]"
          "eth_dst" => "[sflow][eth_dst]"
          "eth_src" => "[sflow][eth_src]"
          "eth_type" => "[sflow][eth_type]"
          "frame_length" => "[sflow][frame_length]"
          "frame_length_times_sampling_rate" => "[flow][bytes]"
          "input_interface" => "[flow][input_snmp]"
          "input_interface_format" => "[sflow][input_interface_format]"
          "input_interface_value" => "[sflow][input_interface_value]"
          "ip_address_next_hop_router" => "[flow][next_hop]"
          "ip_dscp" => "[sflow][ip_dscp]"
          "ip_ecn" => "[sflow][ip_ecn]"
          "ip_flags" => "[sflow][ip_flags]"
          "ip_next_header" => "[sflow][ip_next_header]"
          "ip_options" => "[sflow][ip_options]"
          "ip_packet_length" => "[sflow][ip_packet_length]"
          "ip_priority" => "[sflow][ip_priority]"
          "ip_protocol" => "[flow][ip_protocol]"
          "ip_ttl" => "[sflow][ip_ttl]"
          "ip_type" => "[sflow][ip_type]"
          "ip_version" => "[flow][ip_version]"
          "output_interface" => "[flow][output_snmp]"
          "output_interface_format" => "[sflow][output_interface_format]"
          "output_interface_value" => "[sflow][output_interface_value]"
          "packet_length" => "[sflow][packet_length]"
          "protocol" => "[sflow][protocol]"
          "sample_length" => "[sflow][sample_length]"
          "sampling_rate" => "[flow][sampling_interval]"
          "sflow_type" => "[sflow][sflow_type]"
          "source_id_index" => "[sflow][source_id_index]"
          "source_id_type" => "[sflow][source_id_type]"
          "src_ip" => "[flow][src_addr]"
          "src_mac" => "[sflow][src_mac]"
          "src_mask_len" => "[flow][src_mask_len]"
          "src_port" => "[flow][src_port]"
          "src_priority" => "[sflow][src_priority]"
          "src_vlan" => "[sflow][src_vlan]"
          "sub_agent_id" => "[sflow][sub_agent_id]"
          "tcp_options" => "[sflow][tcp_options]"
          "tcp_urgent_pointer" => "[sflow][tcp_urgent_pointer]"
          "tcp_window_size" => "[sflow][tcp_window_size]"
          "vlan_cfi" => "[sflow][vlan_cfi]"
          "vlan_id" => "[sflow][vlan_id]"
          "vlan_priority" => "[sflow][vlan_priority]"
          "vlan_type" => "[sflow][vlan_type]"
        }
      }

      # Set flow.tcp_flags
      ruby {
        id => "sflow_ruby_construct_tcp_flags"
        code => "
          event.set('[flow][tcp_flags]', event.get('[tcp_is_fin]').to_i + (event.get('[tcp_is_syn]').to_i * 2) + (event.get('[tcp_is_reset]').to_i * 4) + (event.get('[tcp_is_push]').to_i * 8) + (event.get('[tcp_is_ack]').to_i * 16) + (event.get('[tcp_is_urgent]').to_i * 32) + (event.get('[tcp_is_ecn_echo]').to_i * 64) + (event.get('[tcp_is_cwr]').to_i * 128));
        "
      }

      mutate {
        id => "sflow_convert_sflow_fields"
        convert => {
          "[flow][ip_protocol]" => "integer"
          "[flow][src_port]" => "integer"
          "[flow][dst_port]" => "integer"
          "[flow][bytes]" => "integer"
          "[flow][sampling_interval]" => "integer"
          "[flow][tcp_flags]" => "integer"
        }
        remove_field => [ "[tcp_is_fin]", "[tcp_is_syn]", "[tcp_is_reset]", "[tcp_is_push]", "[tcp_is_ack]", "[tcp_is_urgent]", "[tcp_is_ecn_echo]", "[tcp_is_cwr]", "[tcp_is_nonce]" ]
      }

      # lookup source ID type to find the a value for source_id_type.
      if [sflow][source_id_type] {
        translate {
          id => "sflow_translate_source_id_type"
          dictionary_path => "${ELASTIFLOW_DICT_PATH:/etc/logstash/elastiflow/dictionaries}/sflow_source_id_type.yml"
          field => "[sflow][source_id_type]"
          destination => "[sflow][source_id_type]"
          fallback => "UNKNOWN(%{[sflow][source_id_type]})"
          override => true
          refresh_behaviour => "replace"
        }
      }
      
      # Populate normalized ElastiFlow fields with simple mapping from sFlow flow sample.
      mutate {
        id => "sflow_simple_mappings"
        add_field => { "[flow][direction]" => "ingress" }
      }
      if [flow][ip_version] == "4" or [flow][ip_version] == "6" {
        mutate {
          id => "sflow_simple_mappings_set_ip_version"
          replace => { "[flow][ip_version]" => "IPv%{[flow][ip_version]}" }
        }
      } else {
        # Did not recognize IP version.
        mutate {
          id => "sflow_ip_version_not_recognized"
          add_tag => [ "__sflow_ip_version_not_recognized" ]
          replace => { "[flow][ip_version]" => "undetermined" }
        }
      }

      # Estimate packets from sampling rate.
      if [flow][sampling_interval] {
        mutate {
          id => "sflow_simple_mappings_add_packets"
          add_field => { "[flow][packets]" => "%{[flow][sampling_interval]}" }
        }
        mutate {
          id => "sflow_simple_mappings_convert_packets"
          convert => { "[flow][packets]" => "integer" }
        }
      }

      # Populate normalized ElastiFlow fields with source and destination MAC addresses if available.
      if [sflow][eth_src] {
        mutate {
          id => "sflow_add_src_mac_eth"
          rename => { "[sflow][eth_src]" => "[flow][src_mac]" }
        }
      } else if [sflow][src_mac] {
        mutate {
          id => "sflow_add_src_mac"
          rename => { "[sflow][src_mac]" => "[flow][src_mac]" }
        }
      }
      if [sflow][eth_dst] {
        mutate {
          id => "sflow_add_dst_mac_eth"
          rename => { "[sflow][eth_dst]" => "[flow][dst_mac]" }
        }
      } else if [sflow][dst_mac] {
        mutate {
          id => "sflow_add_dst_mac_out"
          rename => { "[sflow][dst_mac]" => "[flow][dst_mac]" }
        }
      }

      # Populate normalized ElastiFlow fields with source VLAN if available.
      if [sflow][vlan_id] {
        mutate {
          id => "sflow_add_vlan_id"
          rename => { "[sflow][vlan_id]" => "[flow][vlan]" }
        }
        if [flow][vlan] == [sflow][src_vlan] {
          mutate {
            id => "sflow_vlan_id_remove_src_vlan"
            remove_field => [ "[sflow][src_vlan]" ]
          }
        }
        if [flow][vlan] == [sflow][dst_vlan] {
          mutate {
            id => "sflow_vlan_id_remove_dst_vlan"
            remove_field => [ "[sflow][dst_vlan]" ]
          }
        }
      } else if [sflow][src_vlan] {
        mutate {
          id => "sflow_add_vlan_src"
          rename => { "[sflow][src_vlan]" => "[flow][vlan]" }
        }
        if [flow][vlan] == [sflow][dst_vlan] {
          mutate {
            id => "sflow_vlan_src_remove_vlan_dst"
            remove_field => [ "[sflow][dst_vlan]" ]
          }
        }
      } else if [sflow][dst_vlan] {
        mutate {
          id => "sflow_add_vlan_dst"
          rename => { "[sflow][dst_vlan]" => "[flow][vlan]" }
        }
      }

      # Populate normalized ElastiFlow fields with TOS value if available.
      if [sflow][ip_dscp] {
        mutate {
          id => "sflow_add_tos_ip_dscp"
          rename => { "[sflow][ip_dscp]" => "[flow][tos]" }
        }
      } else if [sflow][dst_priority] {
        mutate {
          id => "sflow_add_tos_dst_priority"
          rename => { "[sflow][dst_priority]" => "[flow][tos]" }
        }
        if [flow][tos] == [sflow][src_priority] {
          mutate {
            id => "sflow_remove_src_priority"
            remove_field => [ "[sflow][src_priority]" ]
          }
        }
      } else if [sflow][src_priority] {
        mutate {
          id => "sflow_add_tos_src_priority"
          rename => { "[sflow][src_priority]" => "[flow][tos]" }
        }
      } else if [sflow][ip_priority] {
        mutate {
          id => "sflow_add_tos_ip_priority"
          rename => { "[sflow][ip_priority]" => "[flow][tos]" }
        }
      }

      if [sflow][protocol] {
        translate {
          id => "sflow_translate_protocol_name"
          dictionary_path => "${ELASTIFLOW_DICT_PATH:/etc/logstash/elastiflow/dictionaries}/sflow_header_protocol.yml"
          field => "[sflow][protocol]"
          destination => "[sflow][protocol]"
          fallback => "UNKNOWN(%{[sflow][protocol]})"
          override => true
          refresh_behaviour => "replace"
        }
      }
    } else {
      # sFlow counter samples are dropped.
      drop { }
    }
  }
}
