#------------------------------------------------------------------------------
# Copyright (C)2019 Robert Cowart
#
# The contents of this file and/or repository are subject to the Robert Cowart
# Public License (the "License") and may not be used or distributed except in
# compliance with the License. You may obtain a copy of the License at:
#
# http://www.koiossian.com/public/robert_cowart_public_license.txt
#
# Software distributed under the License is distributed on an "AS IS" basis,
# WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License for
# the specific language governing rights and limitations under the License.
#
# The Original Source Code was developed by Robert Cowart. Portions created by
# Robert Cowart are Copyright (C)2019 Robert Cowart. All Rights Reserved.
#------------------------------------------------------------------------------

filter {

  if [agent][type] == "filebeat" {

    # data entering should be json in the message field
    json {
      skip_on_invalid_json => true
      source => "message"
      target => "zeek"
      remove_field => [ "message"]
    }

    # If the data is in an array then add a tag to allow for spliting each index into it's own event.
    ruby {
      code => "if event.get('zeek').is_a? Hash
                event.tag('ishash')
               end"
    }

    # if isHash is not set then go ahead and split
    if "ishash" not in [tags] {
      split {
        field => "zeek"
      }
    }

    if "_jsonparsefailure" not in [tags] {

      # Handle zeek common filters (timestamp, common flow field mappings)
      # set the events timestamp

      # Grab the event_type from the log file-path
      ruby {
       code => "event.set('[zeek][event_type]', event.get('[event_type]'))"
      }
      if [zeek][ts] {
        date {
          id => "zeek_conn_set_timestamp"
          match => [ "[zeek][ts]", "UNIX", "YYYY-MM-dd'T'HH:mm:ss.SSSSSSZ" ]
        }
      }
      # begin processing for conn logs
      if[zeek][event_type] == "conn" {
          # handle the direct mappings
          mutate {
            rename => {
              "[zeek][id.orig_h]" => "[flow][src_addr]"
              "[zeek][id.orig_p]" => "[flow][src_port]"
              "[zeek][id.resp_h]" => "[flow][dst_addr]"
              "[zeek][id.resp_p]" => "[flow][dst_port]"
              "[zeek][orig_l2_addr]" => "[flow][src_mac]"
              "[zeek][resp_l2_addr]" => "[flow][dst_mac]"
              "[zeek][vlan]" => "[flow][vlan]"
            }
            add_field => { "[@metadata][isServer]" => "dst" }
            add_field => { "[event][host]" => "%{[flow][src_addr]}" }
          }
          # handle the protocol type
          if [zeek][proto] == "icmp" {
            mutate {
              add_field => {"[flow][ip_protocol]" => 1 }
            }
          } else if [zeek][proto] == "tcp" {
            mutate {
              add_field => {"[flow][ip_protocol]" => 6 }
            }
          } else if [zeek][proto] == "udp" {
            mutate {
              add_field => {"[flow][ip_protocol]" => 17 }
            }
          }
          if !("service" in [zeek]){
            mutate {
              add_field => {"[zeek][service]" => "unknown" }
            }
          }
        # handle the bytes
        # in bytes
        if [zeek][orig_ip_bytes] and [zeek][orig_bytes] {
          if [zeek][orig_ip_bytes] > [zeek][orig_bytes] {
            mutate {
              add_field => { "[@metadata][in_bytes]" => "%{[zeek][orig_ip_bytes]}"}
            }
          } else {
            mutate {
              add_field => { "[@metadata][in_bytes]" => "%{[zeek][orig_bytes]}"}
            }
          }
        } else if [zeek][orig_ip_bytes] {
          mutate {
            add_field => { "[@metadata][in_bytes]" => "%{[zeek][orig_ip_bytes]}"}
          }
        } else if [zeek][orig_bytes] {
          mutate {
            add_field => { "[@metadata][in_bytes]" => "%{[zeek][orig_bytes]}"}
          }
        }
        # out bytes
        if [zeek][resp_ip_bytes] and [zeek][resp_bytes] {
          if [zeek][resp_ip_bytes] > [zeek][resp_bytes] {
            mutate {
              add_field => { "[@metadata][out_bytes]" => "%{[zeek][resp_ip_bytes]}"}
            }
          } else {
            mutate {
              add_field => { "[@metadata][out_bytes]" => "%{[zeek][resp_bytes]}"}
            }
          }
        } else if [zeek][resp_ip_bytes] {
          mutate {
            add_field => { "[@metadata][out_bytes]" => "%{[zeek][resp_ip_bytes]}"}
          }
        } else if [zeek][resp_bytes] {
          mutate {
            add_field => { "[@metadata][out_bytes]" => "%{[zeek][resp_bytes]}"}
          }
        }

        # add in and out bytes
        if [@metadata][in_bytes] and [@metadata][out_bytes] {
          ruby {
            code => "event.set( '[flow][bytes]', event.get('[@metadata][in_bytes]').to_i + event.get('[@metadata][out_bytes]').to_i )"
          }
        } else if [@metadata][in_bytes] {
          mutate {
            add_field => { "[flow][bytes]" => "%{[@metadata][in_bytes]}" }
          }
        } else if [@metadata][out_bytes] {
          mutate {
            add_field => { "[flow][bytes]" => "%{[@metadata][out_bytes]}" }
          }
        }

        # handle the packets
        if [zeek][orig_pkts] and [zeek][resp_pkts] {
          ruby {
            code => "event.set( '[flow][packets]', event.get('[zeek][orig_pkts]').to_i + event.get('[zeek][resp_pkts]').to_i )"
          }
        } else if [zeek][orig_pkts] {
          mutate {
            add_field => { "[flow][packets]" => "%{[zeek][orig_pkts]}" }
          }
        } else if [zeek][resp_pkts] {
          mutate {
            add_field => { "[flow][packets]" => "%{[zeek][resp_pkts]}" }
          }
        }

      } # end conn.log check
      else if [zeek][event_type] == "dns"{
      }
      else if [zeek][event_type] == "dhcp"{
      }
      else if [zeek][event_type] == "http" {
      }
      else if [zeek][event_type] == "ssh"{
      }
      else {
	    drop {}
      }
    } # END _jsonparsefailure check

    # Remove extraneous file-beat fields
    mutate {
      remove_field => ["agent", "input", "tags", "event", "ecs", "node", "log"]
    }
  } # END file-beat check

}