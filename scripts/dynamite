#!/usr/bin/env python

import os
from sys import argv
from dynamite_nsm import const
from dynamite_nsm import updater
from dynamite_nsm import utilities
from dynamite_nsm.commandline import component_args
from dynamite_nsm.commandline import component_parsers
from dynamite_nsm.services.kibana import exceptions as kibana_exceptions
from dynamite_nsm.services.logstash import exceptions as logstash_exceptions
from dynamite_nsm.services.elasticsearch import exceptions as elastic_exceptions
from dynamite_nsm.components.kibana.component import KibanaCommandlineComponent
from dynamite_nsm.components.monitor.component import MonitorCommandlineComponent
from dynamite_nsm.components.logstash.component import LogstashCommandlineComponent
from dynamite_nsm.components.elasticsearch.component import ElasticsearchCommandlineComponent
from dynamite_nsm.components.agent_dependencies.component import AgentDependencyCommandlineComponent

component_args.register_agent_dependency_component_args(
    component_parsers.agent_deps_component_parser, parent_parsers=[component_parsers.base_parser])
component_args.register_elasticsearch_component_args(
    component_parsers.elasticsearch_component_parser, parent_parsers=[component_parsers.base_parser])
component_args.register_logstash_component_args(
    component_parsers.logstash_component_parser, parent_parsers=[component_parsers.base_parser])
component_args.register_kibana_component_args(
    component_parsers.kibana_component_parser, parent_parsers=[component_parsers.base_parser])
component_args.register_monitor_component_args(
    component_parsers.monitor_component_parser, parent_parsers=[component_parsers.base_parser])

if __name__ == '__main__':

    if len(argv) < 2:
        component_parsers.main_parser.print_help()
        exit(1)

    if argv[1] in ["-v", "--version"]:
        utilities.print_dynamite_logo(const.VERSION)
        exit(0)

    args = component_parsers.main_parser.parse_args()
    if 'action_name' not in args:
        component_parsers.main_parser.print_help()
        component_parsers.main_parser.error(
            "Missing {} 'action' (E.G install, uninstall, start, stop, restart, status)".format(args.component_name))

    if args.component_name:
        if not os.path.exists(const.MIRRORS):
            updater.update_mirrors()
        if not os.path.exists(const.DEFAULT_CONFIGS):
            updater.update_default_configurations()
    try:
        if args.component_name == "agent-dependencies":
            AgentDependencyCommandlineComponent(args)
        elif args.component_name == "elasticsearch":
            es_commandline_component = ElasticsearchCommandlineComponent(args)
        elif args.component_name == "logstash":
            ls_commandline_component = LogstashCommandlineComponent(args)
        elif args.component_name == "kibana":
            kb_commandline_component = KibanaCommandlineComponent(args)
        elif args.component_name == "monitor":
            mon_commandline_component = MonitorCommandlineComponent(args)
    except elastic_exceptions.AlreadyInstalledElasticsearchError:
        print("[-] ElasticSearch is already installed. Uninstall first.")
    except elastic_exceptions.InstallElasticsearchError as e:
        print("[-] ElasticSearch Install Error: {}".format(e.message))
    except elastic_exceptions.UninstallElasticsearchError as e:
        print("[-] ElasticSearch Uninstall Error: {}".format(e.message))
    except elastic_exceptions.CallElasticProcessError as e:
        print("[-] ElasticSearch Process Error: {}".format(e.message))
    except logstash_exceptions.AlreadyInstalledLogstashError:
        print("[-] LogStash is already installed. Uninstall first.")
    except logstash_exceptions.InstallLogstashError as e:
        print("[-] LogStash Install Error: {}".format(e.message))
    except logstash_exceptions.UninstallLogstashError as e:
        print("[-] LogStash Uninstall Error: {}".format(e.message))
    except logstash_exceptions.CallLogstashProcessError as e:
        print("[-] LogStash Process Error: {}".format(e.message))
    except kibana_exceptions.AlreadyInstalledKibanaError:
        print("[-] Kibana is already installed. Uninstall first.")
    except kibana_exceptions.InstallKibanaError as e:
        print("[-] Kibana Install Error: {}".format(e.message))
    except kibana_exceptions.UninstallKibanaError as e:
        print("[-] Kibana Uninstall Error: {}".format(e.message))
    except kibana_exceptions.CallKibanaProcessError as e:
        print("[-] Kibana Process Error: {}".format(e.message))
    except KeyboardInterrupt:
        print("\n[+] Exiting")
        exit(0)
