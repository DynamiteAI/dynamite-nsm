import argparse

from dynamite_nsm.components.elasticsearch.component import ElasticsearchCommandlineComponent


def register_elasticsearch_component_actions(es_component_parser):
    elasticsearch_component_actions_subparsers = es_component_parser.add_subparsers()
    # === Setup ElasticSearch Component Install Arguments === #
    es_install_parser = elasticsearch_component_actions_subparsers.add_parser("install", parents=[base_parser])

    es_install_parser.set_defaults(action_name="install")
    es_install_parser.add_argument("--es-heap-size", dest="elastic_heap_size", type=int, default=4,
                                   help="The amount of memory to designate to ElasticSearch's Java Heap [Gi]"
                                   )
    es_install_parser.add_argument("--es-password", dest="elastic_password", type=str,
                                   help="The password used for logging into ElasticSearch."
                                   )
    es_install_parser.add_argument("--skip-install-jdk", dest="elastic_install_jdk", default=False,
                                   action="store_true", help="Skip the installation of Java 11 Development Environment."
                                   )

    # === Setup ElasticSearch Component Uninstall Arguments === #
    es_uninstall_parser = elasticsearch_component_actions_subparsers.add_parser("uninstall",
                                                                                help="Uninstall ElasticSearch.")
    es_uninstall_parser.add_argument('--skip-uninstall-prompt', dest="skip_elastic_uninstall_prompt", default=False,
                                     action="store_true", help="Skip prompting uninstall prompt.")
    es_uninstall_parser.set_defaults(action_name="uninstall")

    # === Setup ElasticSearch Component Start Arguments === #
    es_start_parser = elasticsearch_component_actions_subparsers.add_parser("start", help="Start ElasticSearch.")
    es_start_parser.set_defaults(action_name="start")

    # === Setup ElasticSearch Component Stop Arguments === #
    es_stop_parser = elasticsearch_component_actions_subparsers.add_parser("stop", help="Stop ElasticSearch.")
    es_stop_parser.set_defaults(action_name="stop")

    # === Setup ElasticSearch Component Restart Arguments === #
    es_restart_parser = elasticsearch_component_actions_subparsers.add_parser("restart", help="Restart ElasticSearch.")
    es_restart_parser.set_defaults(action_name="restart")

    # === Setup ElasticSearch Component Status Arguments === #
    es_restart_parser = elasticsearch_component_actions_subparsers.add_parser("restart", help="Status ElasticSearch.")
    es_restart_parser.set_defaults(action_name="status")


base_parser = argparse.ArgumentParser(add_help=False)
base_parser.add_argument("--slient", dest="silent", default=False, action="store_true",
                         help="Disable terminal output.")

base_parser.add_argument("--verbose", dest="verbose", default=False, action="store_true",
                         help="Show verbose output.")

main_parser = argparse.ArgumentParser(description="Discover your network.")

component_subparsers = main_parser.add_subparsers()

elasticsearch_component_parser = component_subparsers.add_parser("elasticsearch",
                                                                 help="Install, configure, manage ElasticSearch.")
elasticsearch_component_parser.set_defaults(component_name="elasticsearch")

logstash_component_parser = component_subparsers.add_parser("logstash",
                                                            help="Install, configure, manage ElasticSearch.")
logstash_component_parser.set_defaults(component_name="logstash")

kibana_component_parser = component_subparsers.add_parser("kibana", help="Install, configure, manage Kibana.")
kibana_component_parser.set_defaults(component_name="kibana")

register_elasticsearch_component_actions(elasticsearch_component_parser)

args = main_parser.parse_args()
try:
    if args.component_name == "elasticsearch":
        es_commandline_component = ElasticsearchCommandlineComponent(args)
except AttributeError as e:
    if 'Namespace' in str(e):
        main_parser.print_help()
except Exception as e:
    print("A fatal error has occurred; try debugging with verbose flag: {}".format(e))
